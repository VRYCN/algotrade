// AutoTrend v1
SetBarsRequired(sbrAll,sbrAll);

//////////////////////////////////////////////////
// Inputs
nbar             = Param("nbar", 1, 1, 10, 1);
nbarExt          = Param("extra_bars", 1, 1, 10, 1);
stopATRLen       = Param("stop_atr_len", 2, 1, 20, 1);
stopATRMul       = Param("stop_atr_mul", 2, 1, 8, 1);
stopPVNbar       = Param("stop_pv_nbar", 1,1, 10, 1);
maxOpenPositions = Param("max_open_pos", 5, 0, 10, 1);
showShortSignals = ParamToggle("show_short_signals", "No|Yes", 0);
condType         = ParamList("condition_type", "TREND_BREAK|SWING_BREAK|TRENDSWING_BREAK|EARLY_BREAK|ALL_BREAK|EARLY_BREAK2|TREND_SWING_EARLY_BREAK2", 1);

//////////////////////////////////////////////////
// Set max positions etc
if (maxOpenPositions > 0)
{
    SetOption( "MaxOpenPositions", maxOpenPositions);      
    SetPositionSize(100/maxOpenPositions, spsPercentOfEquity);
}

//////////////////////////////////////////////////
// Get Pivot points based on generic High and Low Levels
function GetPV(nbar_t, H_level, L_Level)
{
    PHigh            = H_Level > Ref(HHV(H_Level, nbar_t), -1) AND Ref(HHV(H_Level, nbar_t), nbar_t) <= H_Level;
    PLow             = L_Level < Ref(LLV(L_Level, nbar_t), -1) AND Ref(LLV(L_Level, nbar_t), nbar_t) >= L_Level;
    VarSet("PHigh", PHigh);
    VarSet("PLow", PLow);
}

/////////////////////////////////////////////////
// Get Pivots based on High Low
function GetPVHL(nbar_t)
{
    GetPV(nbar_t, H, L);
}

/////////////////////////////////////////////////
// Get Pivots based on Open Close
function GetPVOC(nbar_t)
{
    LHigh            = IIf(O > C, O, C);
    LLow             = IIf(O < C, O, C);
    GetPV(nbar_t, LHigh, LLow);
}

////////////////////////////////////////////////
// Get Fractals (Previous pivot points)
function GetPrimarySignals(nbar_t, RefSignal)
{
    // Define conditions
    GetPVOC(nbar_t);
    PHigh            = VarGet("PHigh");
    PLow             = VarGet("PLow");

    // High Fractals (Take last 4)
    PHighPrice1      = ValueWhen(PHigh, H, 1);
    PHighPrice2      = ValueWhen(PHigh, H, 2);
    PHighPrice3      = ValueWhen(PHigh, H, 3);
    PHighPrice4      = ValueWhen(PHigh, H, 4);

    // Low Fractals (Take last 4)
    PLowPrice1       = ValueWhen(PLow, L, 1);
    PLowPrice2       = ValueWhen(PLow, L, 2);
    PLowPrice3       = ValueWhen(PLow, L, 3);
    PLowPrice4       = ValueWhen(PLow, L, 4);
    
    // Conditions
    // H1 > H2 & H2 < H3 & H3 < H4
    BuyCondTrBr      = PHighPrice1 >= PHighPrice2 AND PHighPrice2 <= PHighPrice3 AND PHighPrice3 <= PHighPrice4;
    ShortCondTrBr    = PLowPrice1 <= PLowPrice2 AND PLowPrice2 >= PLowPrice3 AND PLowPrice3 >= PLowPrice4;
    // H1 > H2 & H2 > H3
    BuyCondSwBr      = PHighPrice1 >= PHighPrice2 AND PHighPrice2 >= PHighPrice3;
    ShortCondSwBr    = PLowPrice1 <= PLowPrice2 AND PLowPrice2 <= PLowPrice3;
    // H1 < H2 & H2 < H3
    BuyCondTrEBr     = PHighPrice1 <= PHighPrice2 AND PHighPrice2 <= PHighPrice3;
    ShortCondTrEBr   = PLowPrice1 >= PLowPrice2 AND PLowPrice2 >= PLowPrice3;

    // Select apppropriate conditions
    if (condType == "TREND_BREAK")
    {
        BuyCond          = BuyCondTrBr;
        ShortCond        = ShortCondTrBr;
        BuySignal        = Cross(RefSignal, PHighPrice1) AND BuyCond;
        ShortSignal      = Cross(PLowPrice1, RefSignal) AND ShortCond;
    }
    else if (condType == "SWING_BREAK")
    {
        BuyCond          = BuyCondSwBr;
        ShortCond        = ShortCondSwBr;
        BuySignal        = Cross(RefSignal, PHighPrice1) AND BuyCond;
        ShortSignal      = Cross(PLowPrice1, RefSignal) AND ShortCond;
    }
    else if (condType == "TRENDSWING_BREAK")
    {
        BuyCond          = BuyCondTrBr OR BuyCondSwBr;
        ShortCond        = ShortCondTrBr OR ShortCondSwBr;
        BuySignal        = Cross(RefSignal, PHighPrice1) AND BuyCond;
        ShortSignal      = Cross(PLowPrice1, RefSignal) AND ShortCond;
    }
    else if (condType == "EARLY_BREAK")
    {
        BuyCond          = BuyCondTrEBr;
        ShortCond        = ShortCondTrEBr;
        BuySignal        = Cross(RefSignal, PHighPrice1) AND BuyCond;
        ShortSignal      = Cross(PLowPrice1, RefSignal) AND ShortCond;
    }
    else if (condType == "ALL_BREAK")
    {
        BuyCond          = BuyCondTrBr OR BuyCondSwBr OR BuyCondTrEBr;
        ShortCond        = ShortCondTrBr OR ShortCondSwBr OR ShortCondTrEBr;
        BuySignal        = Cross(RefSignal, PHighPrice1) AND BuyCond;
        ShortSignal      = Cross(PLowPrice1, RefSignal) AND ShortCond;
    }
    else if (condType == "EARLY_BREAK2")
    {
        BuyCond          = BuyCondTrEBr;
        ShortCond        = ShortCondTrEBr;
        BuySignal        = (Cross(RefSignal, PHighPrice1) OR Cross(RefSignal, PHighPrice2)) AND BuyCond;
        ShortSignal      = (Cross(PLowPrice1, RefSignal) OR Cross(PLowPrice2, RefSignal)) AND ShortCond;
    }
    else if (condType == "TREND_SWING_EARLY_BREAK2")
    {
        BuyCond1         = BuyCondTrBr OR BuyCondSwBr;
        ShortCond1       = ShortCondTrBr OR ShortCondSwBr;
        BuySignal1       = Cross(RefSignal, PHighPrice1) AND BuyCond1;
        ShortSignal1     = Cross(PLowPrice1, RefSignal) AND ShortCond1;
        //
        BuyCond2         = BuyCondTrEBr;
        ShortCond2       = ShortCondTrEBr;
        BuySignal2       = (Cross(RefSignal, PHighPrice1) OR Cross(RefSignal, PHighPrice2)) AND BuyCond2;
        ShortSignal2     = (Cross(PLowPrice1, RefSignal) OR Cross(PLowPrice2, RefSignal)) AND ShortCond2;
        //
        BuySignal        = BuySignal1 OR BuySignal2;
        ShortSignal      = ShortSignal1 OR ShortSignal2;
    }
    
    VarSet("BuySignal", BuySignal);
    VarSet("ShortSignal", ShortSignal);
}

//////////////////////////////////////////////////
// ATR Stop Loss (Trailing)
function StopTrailingATR(ATR_len, ATR_mul)
{
    // calculate support and resistance levels
    sup = C - ATR_mul * ATR(ATR_Len);
    res = C + ATR_mul * ATR(ATR_Len);

    // calculate trailing stop line
    trailARRAY = 0;
    trailstop = 0;
    for(i = 1; i < BarCount; i++)
    {
        if(C[i] > trailstop AND C[i - 1] > trailstop)
            trailstop = Max(trailstop, sup[i]);
        else
            if(C[i] < trailstop AND C[i - 1] < trailstop)
                trailstop = Min(trailstop, res[i]);
            else
                trailstop = IIf(C[i] > trailstop, sup[i], res[i]);

        trailARRAY[i] = trailstop; 
    }
    return trailArray;
}

///////////////////////////////////////////////////
// Pivots based stop loss
function StopTrailingPV(nbar_t)
{
    LHigh            = IIf(O > C, O, C);
    LLow             = IIf(O < C, O, C);
    GetPV(nbar_t, LHigh, LLow);

    PHigh            = VarGet("PHigh");
    PLow             = VarGet("PLow");
    PriceHigh        = ValueWhen(PHigh, LHigh, 1);
    PriceLow         = ValueWhen(PLow, LLow, 1);
    
    return IIf(Close > PriceLow, PriceLow, PriceHigh);
}

///////////////////////////////////////////////////
// Main logic starts from here.
BuyPrimary       = False;
ShortPrimary     = False;
nbarLow          = IIf((nbar - nbarExt) < 1, 1, (nbar - nbarExt));
nbarHigh         = (nbar + nbarExt);

// Execution signals
for (i= nbarLow; i <= nbarHigh; i++)
{
    GetPrimarySignals(i, Close);
    BuySignal        = VarGet("BuySignal");
    ShortSignal      = VarGet("ShortSignal");
    BuyPrimary       = BuyPrimary OR BuySignal;
    ShortPrimary     = ShortPrimary OR ShortSignal;
}

// Stop loss
stopLoss         = StopTrailingATR(stopATRLen, stopATRMul);
//stopLoss          = StopTrailingPV(stopPVNbar);

///////////////////////////////////////////////////////
// Final position Signals
Buy     = BuyPrimary;
Sell    = Cross(stopLoss, Close);
Short   = False;
Cover   = False;
if (showShortSignals)
{
    Short   = ShortPrimary;
    Cover   = Cross(Close, stopLoss);
}

////////////////////////////////////////////////////////
// Plots
PlotShapes(IIf(Buy, shapeHollowUpTriangle, shapeNone), colorGreen, 0, Close, -50);
PlotShapes(IIf(Short, shapeHollowDownTriangle, shapeNone), colorRed, 0, Close, -50);
Plot(StopLoss, "Stop Loss", colorRed);
