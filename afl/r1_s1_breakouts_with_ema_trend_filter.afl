_SECTION_BEGIN("Pivot Levels");

TIME_FRAMES = "DEFAULT|1MINUTE|5MINUTES|10MINUTES|15MINUTES|30MINUTES|1HOUR|2HOURS|4HOURS|5HOURS|1DAY|2DAYS|4DAYS|1WEEK|2WEEKS|1MONTH|1QUARTER";

// Get afl timeframe from timeframe string
function G_TimeFrame(t_frame)
{
    tFrame = 0;
    if (t_frame == "1MINUTE"){
        tFrame = in1Minute;
    }else if(t_frame == "5MINUTES"){
        tFrame = 5*in1Minute;
    }else if(t_frame == "10MINUTES"){
        tFrame = 10*in1Minute;
    }else if(t_frame == "15MINUTES"){
        tFrame = in15Minute;
    }else if(t_frame == "30MINUTES"){
        tFrame = 2*in15Minute;
    }else if(t_frame == "1HOUR"){
        tFrame = inHourly;
    }else if(t_frame == "2HOURS"){
        tFrame = 2*inHourly;
    }else if(t_frame == "4HOURS"){
        tFrame = 4*inHourly;
    }else if(t_frame == "5HOURS"){
        tFrame = 5*inHourly;
    }else if (t_frame == "1DAY"){
        tFrame = inDaily;
    }else if (t_frame == "2DAY"){
        tFrame = 2*inDaily;
    }else if (t_frame == "4DAILY"){
        tFrame = 4*inDaily;
    }else if (t_frame == "WEEKLY"){
        tFrame = inWeekly;
    }else if (t_frame == "2*WEEKLY"){
        tFrame = 2*inWeekly;
    }else if (t_frame == "MONTHLY"){
        tFrame = inMonthly;
    }else if (t_frame == "2*MONTHLY"){
        tFrame = 2*inMonthly;
    }else if (t_frame == "QUARTERLY"){
        tFrame = inQuarterly;
    }else if (t_frame == "" OR t_frame == "DEFAULT"){
        tFrame = Interval(0);
    }else{
        Error("Wrong time frame " + t_frame);
    }
    return tFrame;
}

// Get CPR Pivots
function G_Pivots(t_frame)
{
    // Get Time frame in numerical format
    tt_frame = G_TimeFrame(t_frame);
    
    PDH = TimeFrameGetPrice("H", tt_frame, -1);    
    PDL = TimeFrameGetPrice("L", tt_frame, -1);
    PDC = TimeFrameGetPrice("C", tt_frame, -1);
    PDO = TimeFrameGetPrice("O", tt_frame, -1);
    
    PI_Level = (PDH + PDL + PDC)/3;
    BC_Level = (PDH + PDL)/2;
    TC_Level = (PI_Level - BC_Level) + PI_Level;
    R1_Level = PI_Level * 2 - PDL;
    S1_Level = PI_Level * 2 - PDH;
    R2_Level = (PI_Level - S1_Level) + R1_Level;
    S2_Level = PI_Level - (R1_Level - S1_Level);
 
    VarSet("PH", PDH);
    VarSet("PL", PDL);   
    VarSet("PI", PI_Level);
    VarSet("BC", BC_Level);
    VarSet("TC", TC_Level);
    VarSet("R1", R1_Level);
    VarSet("S1", S1_Level);
    VarSet("R2", R2_Level);
    VarSet("S2", S2_Level);
}

// Get MTF EMA
function G_EMA(series, period, t_frame, shift)
{
    tt_frame = G_TimeFrame(t_frame);
    series_new = TimeFrameCompress(series, tt_frame);
    
    EMA_sig = Ref(EMA(series_new, period), shift);
    
    return TimeFrameExpand(EMA_sig, tt_frame);
}

SetOption("CommissionMode", 1); //  percent 
SetOption("CommissionAmount", 0.12); //

// Parameters
t_frame_pivots = ParamList("Pivot Time Frame", TIME_FRAMES);
t_frame_ema    = ParamList("EMA Time Frame", TIME_FRAMES);
Cross_thr      = Optimize("Threshold", 20, 0, 50, 5);
EMA_len1       = Optimize("EMA Length", 50, 1, 200, 25);

// Indicators
G_Pivots(t_frame_pivots);
R1 = VarGet("R1");
S1 = VarGet("S1");

EMA_sig1 = G_EMA(C, EMA_len1, t_frame_ema, -1);
EMA_sig2 = G_EMA(C, 2*EMA_len1, t_frame_ema, -1);
EMA_sig3 = G_EMA(C, 4*EMA_len1, t_frame_ema, -1);

Buy   = Cross(Close, R1 + Cross_thr) AND (EMA_sig1 >= EMA_sig2) AND (EMA_sig2 >= EMA_sig3); 
Short = Cross(S1 - Cross_thr, Close) AND (EMA_sig1 <= EMA_sig2) AND (EMA_sig2 <= EMA_sig3);
Sell  = Short;
Cover = Buy;

// Plots
Plot(R1, "R1", colorBrightGreen, styleLine);
Plot(S1, "S1", colorBrown, styleLine);
Plot(EMA_sig1, "EMA1", colorBlue, styleLine);
Plot(EMA_sig2, "EMA2", colorBrown, styleLine);
Plot(EMA_sig3, "EMA3", colorCustom10, styleLine);
